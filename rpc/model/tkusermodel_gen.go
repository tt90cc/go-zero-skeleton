// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tkUserFieldNames          = builder.RawFieldNames(&TkUser{})
	tkUserRows                = strings.Join(tkUserFieldNames, ",")
	tkUserRowsExpectAutoSet   = strings.Join(stringx.Remove(tkUserFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	tkUserRowsWithPlaceHolder = strings.Join(stringx.Remove(tkUserFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	tkUserModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *TkUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TkUser, error)
		Update(ctx context.Context, session sqlx.Session, newData *TkUser) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultTkUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TkUser struct {
		Id        int64        `db:"id"`
		Account   string       `db:"account"`
		Password  string       `db:"password"`
		CreatedAt time.Time    `db:"created_at"`
		UpdatedAt sql.NullTime `db:"updated_at"`
	}
)

func newTkUserModel(conn sqlx.SqlConn) *defaultTkUserModel {
	return &defaultTkUserModel{
		conn:  conn,
		table: "`tk_user`",
	}
}

func (m *defaultTkUserModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, query, id)
	} else {
		_, err = m.conn.ExecCtx(ctx, query, id)
	}
	return err
}

func (m *defaultTkUserModel) FindOne(ctx context.Context, id int64) (*TkUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tkUserRows, m.table)
	var resp TkUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTkUserModel) Insert(ctx context.Context, session sqlx.Session, data *TkUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tkUserRowsExpectAutoSet)
	var err error
	var ret sql.Result
	if session != nil {
		ret, err = session.ExecCtx(ctx, query, data.Account, data.Password, data.CreatedAt, data.UpdatedAt)
	} else {
		ret, err = m.conn.ExecCtx(ctx, query, data.Account, data.Password, data.CreatedAt, data.UpdatedAt)
	}
	return ret, err
}

func (m *defaultTkUserModel) Update(ctx context.Context, session sqlx.Session, data *TkUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tkUserRowsWithPlaceHolder)
	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, query, data.Account, data.Password, data.CreatedAt, data.UpdatedAt, data.Id)
	} else {
		_, err = m.conn.ExecCtx(ctx, query, data.Account, data.Password, data.CreatedAt, data.UpdatedAt, data.Id)
	}
	return err
}

func (m *defaultTkUserModel) tableName() string {
	return m.table
}
